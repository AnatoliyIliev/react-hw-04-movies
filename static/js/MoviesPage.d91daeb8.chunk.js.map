{"version":3,"sources":["services/movies-API.js","views/views.module.scss","userNotFound/no-photo-svgrepo-com.svg","views/MoviesPage.js"],"names":["API_KEY","BASE_URL","fetchWithErrorHandling","a","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTopMovies","fetchSearchMovie","searchQuery","fetchMovieById","movie_id","fetchMovieCredits","fetchMovieReviews","module","exports","MoviesPage","history","useHistory","location","useLocation","useRouteMatch","value","queryString","parse","search","query","useState","searchResalt","setSearchResalt","useEffect","movieShelfAPI","then","catch","console","log","className","styles","Searchbar","onSubmit","event","preventDefault","target","movie","trim","push","document","getElementById","toast","error","SearchForm","SearchForm_input","type","id","name","autoComplete","autoFocus","placeholder","SearchForm_button","SearchForm_button_label","images","results","map","to","pathname","state","from","width","height","imag","src","poster_path","notFound","alt","original_title","text","release_date"],"mappings":"sUAAMA,EAAU,mCACVC,EAAW,+B,SAIFC,I,2EAAf,4CAAAC,EAAA,6DAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,oF,sBAOO,SAASC,IACd,OAAOX,EAAuB,GAAD,OACxBD,EADwB,uCACeD,IAIvC,SAASc,EAAiBC,GAC/B,OAAOb,EAAuB,GAAD,OACxBD,EADwB,iCACSD,EADT,kBAC0Be,IAIlD,SAASC,EAAeC,GAC7B,OAAOf,EAAuB,GAAD,OACxBD,EADwB,kBACNgB,EADM,oBACcjB,IAItC,SAASkB,EAAkBD,GAChC,OAAOf,EAAuB,GAAD,OACxBD,EADwB,kBACNgB,EADM,4BACsBjB,IAI9C,SAASmB,EAAkBF,GAChC,OAAOf,EAAuB,GAAD,OACxBD,EADwB,kBACNgB,EADM,4BACsBjB,M,mBCrCrDoB,EAAOC,QAAU,CAAC,UAAY,yBAAyB,MAAQ,qBAAqB,KAAO,oBAAoB,OAAS,sBAAsB,KAAO,oBAAoB,KAAO,oBAAoB,UAAY,yBAAyB,WAAa,0BAA0B,kBAAoB,iCAAiC,iBAAmB,gCAAgC,OAAS,sBAAsB,KAAO,oBAAoB,YAAc,2BAA2B,YAAc,6B,gCCD1d,QAA0B,kD,iMCU1B,SAASC,IAAc,IAAD,IAC7BC,EAAUC,cACVC,EAAWC,cACTtB,EAAQuB,cAARvB,IACFwB,EAAK,oBAAGC,IAAYC,MAAML,EAASM,eAA9B,aAAG,EAAoCC,aAAvC,QAAgD,GAC3D,EAAwCC,mBAAS,MAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAGAC,qBAAU,WACHR,GAGLS,IACoBT,GACjBU,KAAKH,GACLI,OAAM,kBAAMC,QAAQC,IAAR,yCAAqBb,EAArB,uGACd,CAACA,IAmBJ,OACE,qCACE,yBAAQc,UAAWC,IAAOC,UAA1B,UACE,uBAAMC,SApBS,SAAAC,GACnBA,EAAMC,iBAEN,IAAIhB,EAASe,EAAME,OAAOC,MAAMrB,MAEV,KAAlBG,EAAOmB,QAIX3B,EAAQ4B,KAAR,2BACK1B,GADL,IAEEM,OAAO,SAAD,OAAWA,MAGnBqB,SAASC,eAAe,cAAczB,MAAQ,IAR5C0B,IAAMC,MAAM,wIAcoBb,UAAWC,IAAOa,WAAhD,UACE,uBACEd,UAAWC,IAAOc,iBAClBC,KAAK,OACLC,GAAG,aAEHC,KAAK,QACLC,aAAa,MACbC,WAAS,EACTC,YAAY,kBAEd,wBAAQL,KAAK,SAAShB,UAAWC,IAAOqB,kBAAxC,SACE,sBAAMtB,UAAWC,IAAOsB,wBAAxB,yBAGJ,cAAC,IAAD,IACA,0BAED/B,GACC,oBAAIQ,UAAWC,IAAOuB,OAAtB,SACGhC,EAAaiC,QAAQC,KAAI,SAAAnB,GAAK,OAC7B,6BACE,eAAC,IAAD,CACEoB,GAAI,CACFC,SAAS,GAAD,OAAKlE,EAAL,YAAY6C,EAAMU,IAC1BY,MAAO,CAAEC,KAAM/C,IAHnB,UAME,qBACEgD,MAAM,QACNC,OAAO,QACPhC,UAAWC,IAAOgC,KAClBC,IACwB,OAAtB3B,EAAM4B,YAAN,0CACuC5B,EAAM4B,aAEzCC,IAENC,IAAK9B,EAAM+B,iBAEb,mBAAGtC,UAAWC,IAAOsC,KAArB,SAA4BhC,EAAM+B,iBAClC,mBAAGtC,UAAWC,IAAOsC,KAArB,SAA4BhC,EAAMiC,mBApB7BjC,EAAMU","file":"static/js/MoviesPage.d91daeb8.chunk.js","sourcesContent":["const API_KEY = '62206d4957df9dd79d427a079d453822';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\n// https://api.themoviedb.org/3/movie/550?api_key=62206d4957df9dd79d427a079d453822\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n}\n\nexport function fetchTopMovies() {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`,\n  );\n}\n\nexport function fetchSearchMovie(searchQuery) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}`,\n  );\n}\n\nexport function fetchMovieById(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movie_id}?api_key=${API_KEY}`,\n  );\n}\n\nexport function fetchMovieCredits(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movie_id}/credits?api_key=${API_KEY}`,\n  );\n}\n\nexport function fetchMovieReviews(movie_id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}/movie/${movie_id}/reviews?api_key=${API_KEY}`,\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"views_container__ywjq2\",\"items\":\"views_items__1v5cI\",\"link\":\"views_link__2lqtn\",\"genres\":\"views_genres__1L3pu\",\"back\":\"views_back__9rb4j\",\"info\":\"views_info__1-Db9\",\"Searchbar\":\"views_Searchbar__3ca6X\",\"SearchForm\":\"views_SearchForm__2CCz2\",\"SearchForm_button\":\"views_SearchForm_button__V9aCd\",\"SearchForm_input\":\"views_SearchForm_input__23y9V\",\"images\":\"views_images__34F7M\",\"text\":\"views_text__1ZJm-\",\"actors_name\":\"views_actors_name__2fjUW\",\"text_actors\":\"views_text_actors__PXwTy\"};","export default __webpack_public_path__ + \"static/media/no-photo-svgrepo-com.884c6ded.svg\";","import { useState, useEffect } from 'react';\nimport { useHistory, useLocation, Link, useRouteMatch } from 'react-router-dom';\nimport * as movieShelfAPI from '../services/movies-API';\nimport { ToastContainer } from 'react-toastify';\nimport styles from './views.module.scss';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport queryString from 'query-string';\nimport notFound from '../userNotFound/no-photo-svgrepo-com.svg';\n\nexport default function MoviesPage() {\n  const history = useHistory();\n  const location = useLocation();\n  const { url } = useRouteMatch();\n  const value = queryString.parse(location.search)?.query ?? '';\n  const [searchResalt, setSearchResalt] = useState(null);\n  // const [searchQuery, setSearchQuery] = useState(\"\");\n\n  useEffect(() => {\n    if (!value) {\n      return;\n    }\n    movieShelfAPI\n      .fetchSearchMovie(value)\n      .then(setSearchResalt)\n      .catch(() => console.log(`Поиск ${value} не дал результата`));\n  }, [value]);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    let search = event.target.movie.value;\n\n    if (search.trim() === '') {\n      toast.error('Введите что-то для поиска.');\n      return;\n    }\n    history.push({\n      ...location,\n      search: `query=${search}`,\n    });\n\n    document.getElementById('movieInput').value = '';\n  };\n\n  return (\n    <>\n      <header className={styles.Searchbar}>\n        <form onSubmit={handleSubmit} className={styles.SearchForm}>\n          <input\n            className={styles.SearchForm_input}\n            type=\"text\"\n            id=\"movieInput\"\n            // value={search}\n            name=\"movie\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n          />\n          <button type=\"submit\" className={styles.SearchForm_button}>\n            <span className={styles.SearchForm_button_label}>Search</span>\n          </button>\n        </form>\n        <ToastContainer />\n        <hr />\n      </header>\n      {searchResalt && (\n        <ul className={styles.images}>\n          {searchResalt.results.map(movie => (\n            <li key={movie.id}>\n              <Link\n                to={{\n                  pathname: `${url}/${movie.id}`,\n                  state: { from: location },\n                }}\n              >\n                <img\n                  width=\"250px\"\n                  height=\"375px\"\n                  className={styles.imag}\n                  src={\n                    movie.poster_path !== null\n                      ? `https://image.tmdb.org/t/p/w500/${movie.poster_path}`\n                      : // : 'https://img.icons8.com/ios-filled/50/000000/user-not-found.png'\n                        notFound\n                  }\n                  alt={movie.original_title}\n                />\n                <p className={styles.text}>{movie.original_title}</p>\n                <p className={styles.text}>{movie.release_date}</p>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}